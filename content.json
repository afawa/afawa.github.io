{"pages":[{"title":"About me","text":"简历测试","link":"/about/index.html"}],"posts":[{"title":"shell脚本构建","text":"构建基本shell脚本显示输出，引用变量 echo 命令，使用””和‘’进行区分 echo -n 随后的输出不会换行 $name，${name} 引用变量 ，使用\\$进行转义 命令替换 两种方法，反引号`和$( )格式 命令替换会创建一个子shell来运行对应的命令，所以无法使用在脚本中所创建的变量 在命令提示符下使用路径./运行命令的话，也会创建出子shell，要是运行命令的时候不加入路径，就不会创建子shell。如果使用的是shell内建命令，不会涉及子shell 重定向 &gt;&gt; 重定向输出并且不会清空文件原有的内容 内联输入重定向符号 &lt;&lt;，除了这个符号，你必须指定一个文本标记来划分输入数据的开始和结尾 12345$ wc &lt;&lt; EOF&gt; test string 1&gt; test string 2&gt; test string 3&gt; EOF 执行数学运算 第一种方式使用expr命令，例如expr 1 + 5，expr 2 \\* 5，在shell中使用需要进行命令替换 第二种方式使用方括号，例如 var=$[1 + 5]，var=$[2 * 5] bash shell 原生只支持整形运算 在bash中使用浮点运算的一种方式是使用内建计算器bc，在脚本中使用bc，可以使用命令替换+管道的方式，例如 123var1=100var2=45var=$(echo &quot;scale=4; $var1 / $var2&quot; | bc) 或者使用内联输入重定向，例如 1234567var=$( bc &lt;&lt; EOFscale=4a1 = ($var1 * $var2)b1 = ($var3 * $var4)a1 + b1EOF) 退出脚本 linux提供了专门的变量$?来存储上一个命令的退出状态码，可以直接用echo $?查看 默认情况下shell脚本会以脚本的最后一个命令的退出码退出 可以使用exit命令指定退出码 退出码范围 0~255","link":"/2021/01/08/shell%E8%84%9A%E6%9C%AC%E6%9E%84%E5%BB%BA/"},{"title":"shell脚本结构化命令","text":"结构化命令if-then 语句1234if commandthen commandsfi 如果if后的命令的推出码是0，则会运行then部分。 运行if语句中的错误信息依然会显示，可以用某些方法避免 另一种形式 123if command; then commandsfi if-then-else 语句 123456if commandthen commandselse commandsfi if中的语句的退出码不为0时，运行else中的语句 嵌套if123456if command1then commandselif command2 commandsfi test 命令如果test命令中列出的条件成立，test命令就会退出并返回退出码0。如果condition部分本身为空，那么test以非零返回。 1234567# test 命令test condition# test 命令结合if-elseif test conditionthen commandsfi bash 提供了另一种测试方式，不需要声明test命令。方括号定义了测试条件，第一个方括号后和第二个方括号前必须加上一个空格。 1234if [ condition ]then commandsfi test可以测试一个变量是否为空，不为空则返回0 数值比较 n1 arg n2，其中n1，n2是数值，arg是选项，arg包括 -eq, -ge, -gt, -le, -lt, -ne （相等，大于等于，大于，小于等于，小于，不等于）。 bash shell只能处理整数，test命令不能处理浮点数。 字符串比较 字符串相等性。str1 = str2 判断两个字符串是否相等，str1 != str2 判断两个字符串是否不相等 字符串顺序。str1 \\&gt; str2 , str1 \\&lt; str2。大于号小于号必须使用转义，不然会被理解成重定向符号。在test中，根据ASCII标准进行排序，sort和test对于大写小写的判断是反的。 字符串大小。-n str1 检查str1的长度是否为0 ，-z str1 检查str1的长度是否不为0。 文件比较 检查目录。-d file，检查file是否存在并是一个目录。 检查对象是否存在。-e file，检查file是否存在。 检查文件。-f file，检查file是否存在并是一个文件。 检查是否可读。-r file，检查file是否存在并可读。 检查空文件。-s file，检查file是否存在并非空。 检查是否可写。-w file，检查file是否存在并可写。 检查文件是否可以执行。-x file，检查file是否存在并可执行。 检查所属关系。-O file，检查file是否存在并属于当前用户所有。 检查默认属主关系。-G file，检查file是否存在并且默认组与当前用户相同。 检查文件日期。file1 -nt file2，检查file1是否比file2新。file1 -ot file2，检查file1是否比file2旧。 复合条件测试 允许使用 &amp;&amp; 和 || 连接多个condition。 if-then 高级特性 双括号。双括号命令运行在比较过程中使用高级数学符号。（几乎是所有c中的运算都能用）并且在双括号中不需要对&gt;和&lt;进行转义。 12345var=10if (( var ** 2 &lt; 1000 ))then var=$(( var-- ))fi 双方括号。双方括号中可以使用模式匹配。例如 [[ $USER == r* ]]，这里使用了==，右边的r*就是一个模式。 case 命令类似switch命令，格式如下 12345case variable inpattern1 | pattern2) commands1;;pattern3) commands2;;*) commands3;;esac for 命令1234for var in listdo commandsdone 在list参数中，需要提供迭代中要用到的一系列值。 读取列表中的值。for命令最基本的用法就是遍历for命令本身所定义的一系列值。在最后一次迭代后，$test的值会在shell脚本的剩余部分一直保持有效。 1234for test in aaa bbb ccc ddddo echo $testdone 读取列表中的复杂值。 如果列表中的值存在单引号，可以用如下两种方式：1.使用转义，2.使用双引号。 1234for test in I don\\'t know if &quot;this'll&quot; workdo echo $testdone 如果存在空格，必须使用双引号把这个值框起来。 从变量读取列表 123456list=&quot;aaa bbb ccc&quot;list=$list&quot; ddd&quot;for test in listdo echo $testdone 从命令读取值 12345file=testfile.txtfor test in $(cat $file)do echo $testdone 更改字段分隔符 内部字段分隔符，IFS环境变量定义了bash shell用作字段分隔符的一系列字符。默认情况下，bash shell会将下列字符当作字段分隔符：1. 空格，2. 制表符，3. 换行符 修改IFS，例如，IFS=$'\\n'。这里注意用$'\\n'，$'string'是用来表示带转义序列的字符串文字的语法 (called ANSI C-quoted strings) 指定多个的时候只需要简单拼接。IFS=$'\\n':;&quot; 用通配符读取目录 必须使用通配符，它会强制shell使用文件扩展匹配。 1234567for file in /home/yiming/*do if [ -d &quot;$file&quot; ] then echo &quot;$file is a directory&quot; fidone 注意这里”$file”应对文件名带空格的情况。同时可以使用多个通配符拼接，通配符加目录一起使用 C风格for1for (( variable assignment ; condition ; iteration process )) 变量赋值可以用空格 条件中的变量不已美元开头 迭代过程的算式不使用expr表达式 123456789for (( i=1 ; i&lt;=10 ; i++ ))do echo $idonefor (( a=1, b=10; a&lt;=10; a++, b-- ))do echo &quot;$a - $b&quot;done while 命令 基本格式 1234while test commanddo other commanddone 这里的test command和if-else语句一模一样。 12345var1=10while [ $var -gt 1 ]do var1=$(( var - 1 ))done 使用多个测试命令 while 命令允许你在while语句定义多个测试命令，只有最后一个测试命令的退出状态码会被用来决定什么时候退出循环。 123456var1=10while echo $var1 [ $var1 -ge 0 ]do var=$(( var1 - 1 ))done until 命令 1234until test commandsdo other commandsdone 本质是和while相反的语句。 循环控制 break命令。直接使用break命令会跳出当前正在执行的循环。可以使用 break n来指定跳出的层数，默认n=1也就是跳出当前循环。 continue命令。和break相同，可以使用continue n的语法指定继续执行哪一级的循环。 处理循环的输出在shell脚本中可以对循环的输出使用管道或进行重定向。可以通过在done命令后添加一个处理命令来实现。 12345678910111213141516171819# 重定向例子for (( a=1; a&lt;=10; a++))do echo $adone &gt; output.txt# 也可以使用重定向进行输入，然后用read命令处理input=&quot;users.csv&quot;while IFS=',' read -r userid namedo echo &quot;adding $userid&quot; useradd -c &quot;$name&quot; -m $useriddone &lt; &quot;$input&quot;# 管道例子for (( a=1; a&lt;=10; a++))do echo $adone | sort","link":"/2021/01/08/shell%E8%84%9A%E6%9C%AC%E7%BB%93%E6%9E%84%E5%8C%96%E5%91%BD%E4%BB%A4/"}],"tags":[{"name":"shell programming","slug":"shell-programming","link":"/tags/shell-programming/"}],"categories":[{"name":"programming language","slug":"programming-language","link":"/categories/programming-language/"}]}